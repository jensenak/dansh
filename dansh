#!/usr/bin/python3 

import cmd
import readline
import os
import re
import stat
import subprocess 
import functools

blk = "\033[0;30m"
red = "\033[0;31m"
grn = "\033[0;32m"
yel = "\033[0;33m"
blu = "\033[0;34m"
pur = "\033[0;35m"
cyn = "\033[0;36m"
wht = "\033[0;37m"
bblk = "\033[1;30m"
bred = "\033[1;31m"
bgrn = "\033[1;32m"
byel = "\033[1;33m"
bblu = "\033[1;34m"
bpur = "\033[1;35m"
bcyn = "\033[1;36m"
bwht = "\033[1;37m"
res = "\033[0m"

recheck = re.compile("^[a-zA-Z0-9_/]{1,20}$")
prompt_base = lambda cwd : f"\nUser: {bcyn}Dan{res} | Location: {bgrn}{cwd}{res} > "
parent_path = os.path.abspath(os.getcwd())

# restricted is a decorator that limits all activity to the path where dansh was started (or subdirectories)
# and prevents arguments from being passed that contain characters other than numbers, letters, and underscores.
def restricted(method):
    @functools.wraps(method)
    def wrapper(self, arg):
        args = arg.split(" ")
        for a in args:
            real = os.path.abspath(a)
            if parent_path != os.path.commonpath([parent_path, real]):
                print(f"{red}The path {bred}{a}{red} is outside your home directory. This is not allowed.{res}")
                return
            if not recheck.fullmatch(a):
                if a == "..":
                    continue
                print(f"{red}The name {bred}{a}{red} is not allowed.{res}")
                return
        method(self, args)
    return wrapper

class DanShell(cmd.Cmd):
    intro = "Welcome to the Raspberry Pi. Type 'help' or '?' to list commands.\n"
    prompt = prompt_base(parent_path)
    
    def emptyline(self):
        print("")

    def postcmd(self, stop, line):
        DanShell.prompt = prompt_base(os.getcwd())
        return stop

    def do_echo(self, arg):
        """
        Usage: echo <any text>

        Echo repeats whatever you say.
        """
        print(arg)

    @restricted
    def do_cat(self, args):
        """
        Usage: cat <file1> <file2> ...

        Cat writes out the content of the files you specify. You can specify multiple files.
        """
        subprocess.run(["cat", *args])

    @restricted
    def do_mkdir(self, args):
        """
        Usage: mkdir <directory>

        Make a new directory. Directories can contain files and other directories.
        The name of the directory can only contain numbers, letters, and underscores (_).
        """        
        try:
            os.mkdir(args[0])
        except FileExistsError:
            print(f"{byel}That directory already exists.{res}")

    @restricted
    def do_rmdir(self, args):
        """
        Usage: rmdir <directory>

        Remove an empty directory. This command will fail if the directory still contains
        files or other directories.
        """
        try:
            os.rmdir(args[0])
        except FileNotFoundError:
            print(f"{byel}I can't find a directory with that name.{res}")
        except OSError:
            print(f"{byel}I can't remove that directory. Is it empty?{res}")

    @restricted
    def do_rm(self, args):
        """
        Usage: rm <file>

        Remove a file. This is permanent. You cannot restore a file after it has been removed.
        """
        try:
            os.remove(args[0])
        except IsADirectoryError:
            print(f"{byel}{args[0]} is a directory, use rmdir instead.{res}")
        except FileNotFoundError:
            print(f"{byel}I can't find that file.{res}")

    @restricted
    def do_mv(self, args):
        """
        Usage: mv <file|directory> <new location>

        This command is useful for renaming files and for moving them.
        For example, you can rename 'file' to 'book' by running the command
            mv file book
        You can also move a file into a directory as follows:
            mv file writing/file
        As long as the directory 'writing/' exists.
        """
        try:
            os.rename(args[0], args[1])
        except IsADirectoryError:
            print(f"{byel}I can't overwrite a directory with a file.{res}")
        except NotADirectoryError:
            print(f"{byel}I can't move a directory into a file.{res}")
        except OSError:
            print(f"{byel}Hmm... I can't seem to do that.{res}")

    @restricted
    def do_cd(self, args):
        """
        Usage: cd <..|directory>

        Change directories.
        If you give a directory name, cd will move you into that directory.
        If you give ".." it cd will move you up to the parent directory.
        """    
        try:
            os.chdir(args[0])
        except FileNotFoundError:
            print(f"{byel}I couldn't find a directory with that name.{res}")
        except PermissionError:
            print(f"{byel}Hmm... it seems you don't have permission to use that directory.{res}")
        except NotADirectoryError:
            print(f"{byel}That isn't a directory. Use edit to open a file.{res}")
        except OSError:
            print(f"{byel}Hmm... something went wrong.{res}")

    def do_ls(self, arg):
        """
        Usage: ls

        List files and directories in the current location.
        """
        print(f"Contents of {os.getcwd()}:")
        files = os.listdir()
        if len(files) == 0:
            print("-- Empty --")
            return

        files.sort()
        for f in files:
            if f[0] == ".":
                continue
            info = os.lstat(f)
            if stat.S_ISDIR(info.st_mode) > 0:
                print(f"{bblu}{f}/{res}")
            else:
                print(f"{bwht}{f}{res}")

    @restricted
    def do_edit(self, args):
        """
        Create a new file to edit.
        """
        subprocess.run(["/usr/local/bin/micro", args[0]])

    def do_exit(self, arg):
        """Log out"""
        print("Thanks for stopping by!")
        return True


if __name__ == "__main__":
    os.chdir("/home/dan")
    DanShell().cmdloop()

